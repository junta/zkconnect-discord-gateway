import Head from "next/head";
import { useState } from "react";
import axios from "axios";
import {
  ZkConnectButton,
  ZkConnectClientConfig,
  ZkConnectResponse,
} from "@sismo-core/zk-connect-react";
import {
  Box,
  Button,
  Center,
  Flex,
  FormControl,
  FormHelperText,
  FormLabel,
  Heading,
  Input,
  Text,
} from "@chakra-ui/react";

export default function Home() {
  const [verifying, setVerifying] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [status, setStatus] = useState<
    "already-added" | "not-added" | "success" | null
  >(null);
  const [zkConnectResponse, setZkConnectResponse] =
    useState<ZkConnectResponse | null>(null);

  const [discordId, setDiscordId] = useState("");

  if (typeof process.env.NEXT_PUBLIC_SISMO_APP_ID !== "string") {
    throw new Error("Please fill NEXT_PUBLIC_SISMO_APP_ID in your .env file");
  }
  if (
    typeof process.env.NEXT_PUBLIC_DEV_ADDRESS !== "string" &&
    process.env.NODE_ENV === "development"
  ) {
    throw new Error("Please fill NEXT_PUBLIC_DEV_ADDRESS in your .env file");
  }

  const devMode =
    process.env.NODE_ENV === "development"
      ? {
          enabled: true, // will use the Dev Sismo Data Vault https://dev.vault-beta.sismo.io/
          devAddresses: [
            // Will insert these addresses in data groups as eligible addresse
            process.env.NEXT_PUBLIC_DEV_ADDRESS!,
          ],
        }
      : {
          enabled: false,
        };

  const config: ZkConnectClientConfig = {
    appId: process.env.NEXT_PUBLIC_SISMO_APP_ID,
    devMode: devMode,
  };

  const handleVerify = async (response: ZkConnectResponse) => {
    setZkConnectResponse(response);
    setVerifying(true);
    axios
      .post("api/verify", {
        zkConnectResponse: response,
      })
      .then((res) => {
        setVerifying(false);
        setStatus(res.data.status);
      })
      .catch((err) => {
        console.log(err.response.data.status);
        setVerifying(false);
      });
  };

  const handleGiveRole = async (event: { preventDefault: () => void }) => {
    event.preventDefault();

    axios
      .post("api/addRole", {
        discordId,
        zkConnectResponse,
      })
      .then((res) => {
        setStatus(res.data.status);
      })
      .catch((err) => {
        console.log(err.response.data.status);
        setErrorMessage("Discord ID is not valid");
      });
  };

  return (
    <>
      <Head>
        <title>ZKConnect Discord Gateway</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Flex
        direction="column"
        alignItems="center"
        justifyContent="center"
        minHeight="100vh"
        bg="gray.100"
      >
        {status == null && (
          <>
            <Heading as="h2" size="lg" mb="8">
              Claim role to access our closed channel in Discord
            </Heading>

            <ZkConnectButton
              config={config}
              //You will need to register an appId in the Factory
              // appId={"0x0ac79baba82535964a0d2368aad57404"}
              //Request proofs from your users for a groupId
              dataRequest={{
                groupId: process.env.NEXT_PUBLIC_SISMO_GROUP_ID,
              }}
              //After user redirection get a response containing his proofs
              onResponse={async (response) => {
                handleVerify(response);
              }}
              verifying={verifying}
            />
          </>
        )}
        {status == "not-added" && (
          <>
            <Heading as="h2" size="lg" mb="8">
              You are eligible!
            </Heading>
            <form onSubmit={handleGiveRole}>
              <FormControl>
                <FormLabel>Your Discord User ID</FormLabel>
                <Input
                  type="text"
                  onChange={(event) => setDiscordId(event.currentTarget.value)}
                />

                <Center>
                  <Button mt={4} colorScheme="teal" type="submit">
                    Submit
                  </Button>
                </Center>
              </FormControl>
            </form>
          </>
        )}
        {status == "already-added" && (
          <>
            <Text>You have already claimed your role</Text>
          </>
        )}
        {status == "success" && (
          <>
            <Heading as="h2" size="lg" mb="8">
              Congratulations!
            </Heading>
            <Text>
              You have successfully claimed your role, please check our discord
              server.
            </Text>
          </>
        )}
      </Flex>
    </>
  );
}
